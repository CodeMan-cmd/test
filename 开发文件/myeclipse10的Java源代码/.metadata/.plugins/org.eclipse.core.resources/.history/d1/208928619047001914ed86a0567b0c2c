package controller;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import pojo.User;

import service.UserService;
import util.Page;

@Controller
public class IndexController {
	@Resource
	private UserService userService;
	// 分页查询
	@RequestMapping("/cc")
	protected String handleRequestInternal(
			@RequestParam(value = "userCode", required = false) String userCode,
			@RequestParam(value = "userName", required = false) String userName,
			@RequestParam(value = "dangqianyema", required = false) String dangqianyema,
			HttpServletRequest req, HttpServletResponse res) throws Exception {
		User u = new User();
		Page p = new Page();
		if (!"".equals(dangqianyema) && null != dangqianyema) {
			// 当前页数不为空时添加当前页数
			p.setDangqianyema(Integer.parseInt(dangqianyema));// String类型 强 转换成
																// int 类型

		}
		if (!"".equals(userCode) && null != userCode) {
			// userCode不为空添加userCode
			u.setUserCode(userCode);
			req.setAttribute("userCode", userCode);
		}
		if (!"".equals(userName) && null != userName) {
			String userNameNew = new String(userName.getBytes("iso-8859-1"),
					"utf-8");
			System.out.println(userNameNew);
			// userName不为空添加userName
			u.setUserName(userNameNew);
			req.setAttribute("userName", userNameNew);
		}
		List<User> list = userService.getAllUser(u, p);
		// 保存查询道的User集合
		req.setAttribute("list", list);

		req.setAttribute("p", p);
		return "index";
	}
	//获取id查询uu
	@RequestMapping("/add")
	public String updateUser(
			@RequestParam(value = "id", required = false) int id,
			HttpServletRequest req) {
		System.out.println(id);
		List<User> upUser = userService.selectById(id);
		req.setAttribute("id", id); // req.getAttribute(arg0)
		req.setAttribute("upUser", upUser);
		return "updateUser";
	}
	//获取id添加
	@RequestMapping("/add2")
	public String addUser(
			@RequestParam(value = "id", required = false) int id,
			@RequestParam(value = "userCode", required = false) String userCode,
			@RequestParam(value = "userName", required = false) String userName,
			HttpServletRequest req) {
		User u = new User();
		u.setId(id);
		u.setUserCode(userCode);
		u.setUserName(userName);
		userService.updateUser(u);
		return "index";

	}
	//调回添加
	@RequestMapping("/insertAA")
	public String insertAA() {
		return "aa";

	}
	//添加
	@RequestMapping("/insertUser")
	public String insertUser(
			@RequestParam(value = "userCode", required = false) String userCode,
			@RequestParam(value = "userName", required = false) String userName,
			@RequestParam(value = "userPassword", required = false) String userPassword,
			HttpServletRequest req) {
		User i = new User();
		i.setUserCode(userCode);
		i.setUserName(userName);
		i.setUserPassword(userPassword);
		userService.insertUser(i);
		return "index";
	}
	//删除
	@RequestMapping("/dateUser")
	public String dateUser(
			@RequestParam(value = "id", required = false) int id) {
		
		return "index";
	}
	//全局报错
	@ExceptionHandler(value=RuntimeException.class)
	public String handlerException(RuntimeException e,HttpServletRequest req){
		req.setAttribute("e",e.getMessage());
		return "Vulnerability";
	}
	//添加图片sjp
	@RequestMapping("image")
	public String image(){

		return "add";
		
	}
	//sjp的控制器
	@RequestMapping("sc")
	public String addSave(@RequestParam(value="a_idPicPath",required=false) MultipartFile mf,@Valid User user ,BindingResult br) throws IOException{
		/*if(br.hasErrors()){
			return "res";///注册页面
		}*/
		/*int addUser = userService.addUser(user);
		if(addUser>0){
			return "index";
		}else{
		}*/
		
		System.out.println(mf.getName());
		
		///判断文件是否存在,,
		//声明一个入径存储图片
		Date date=new Date();
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		String format = sdf.format(date);
		
		String newPicUrl=format+"---"+mf.getOriginalFilename();
		File f=new File("C:\\Users\\Administrator\\Desktop\\myeclipse10的Java源代码\\spring-batis\\WebRoot\\imgae\\"+newPicUrl);
		byte[] bytes = mf.getBytes();
		
		//FileInputStream fis=new FileInputStream(file);
		FileOutputStream fos=new FileOutputStream(f);//创建字节输出流
		DataOutputStream dos=new DataOutputStream(fos);//创建数据输出流
		
		dos.write(bytes);
		dos.close();
		fos.close();

		return "add";
	}
}