package controller;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import pojo.User;

import service.UserService;
import util.Page;

@Controller
public class IndexController {
	@Resource
	private UserService userService;

	// 分页查询
	@RequestMapping("/cc")
	protected String handleRequestInternal(
			@RequestParam(value = "userCode", required = false) String userCode,
			@RequestParam(value = "userName", required = false) String userName,
			@RequestParam(value = "dangqianyema", required = false) String dangqianyema,
			HttpServletRequest req, HttpServletResponse res) throws Exception {
		User u = new User();
		Page p = new Page();
		if (!"".equals(dangqianyema) && null != dangqianyema) {
			// 当前页数不为空时添加当前页数
			p.setDangqianyema(Integer.parseInt(dangqianyema));// String类型 强 转换成
																// int 类型

		}
		if (!"".equals(userCode) && null != userCode) {
			// userCode不为空添加userCode
			u.setUserCode(userCode);
			req.setAttribute("userCode", userCode);
		}
		if (!"".equals(userName) && null != userName) {
			String userNameNew = new String(userName.getBytes("iso-8859-1"),
					"utf-8");
			System.out.println(userNameNew);
			// userName不为空添加userName
			u.setUserName(userNameNew);
			req.setAttribute("userName", userNameNew);
		}
		List<User> list = userService.getAllUser(u, p);
		// 保存查询道的User集合
		req.setAttribute("list", list);

		req.setAttribute("p", p);
		return "index";
	}

	@RequestMapping("/add")
	public String updateUser(
			@RequestParam(value = "id", required = false) int id,
			HttpServletRequest req) {
		System.out.println(id);
		List<User> upUser = userService.selectById(id);
		req.setAttribute("id", id);
		req.setAttribute("upUser", upUser.get(0));
		return "updateUser";
	}

	@RequestMapping("/add2")
	public String addUser(
			@RequestParam(value = "id", required = false) int id,
			@RequestParam(value = "userCode", required = false) String userCode,
			@RequestParam(value = "userName", required = false) String userName,
			HttpServletRequest req) {
		User u = new User();
		u.setId(id);
		req.setAttribute("id", id);
		System.out.println(userCode+"    "+userName+"11111111111111111");
		u.setAddress(userCode);
		u.setAddress(userName);
		int uu = userService.updateUser(u);
		System.out.println(uu);
		return "index";

	}
}
/*
 * // 添加
 * 
 * @RequestMapping("/bb") public String addUser(
 * 
 * @RequestParam(value = "userCode", required = false) String userCode,
 * 
 * @RequestParam(value = "userName", required = false) String userName,
 * 
 * @RequestParam(value = "userPassword", required = false) String userPassword,
 * HttpServletRequest req) { User u = new User(); if (!"".equals(userCode) &&
 * null != userCode) { u.setUserCode(userCode); } if (!"".equals(userName) &&
 * null != userName) { u.setUserName(userName); } if (!"".equals(userPassword)
 * && null != userPassword) { u.setUserPassword(userPassword); } if
 * ("".equals(userCode) || null == userCode || "".equals(userName) || null ==
 * userName || "".equals(userPassword) || null != userPassword) {
 * req.setAttribute("info", "数据信息不完整"); return "aa"; } int addUser =
 * userService.addUser(u); if (addUser > 0) { req.setAttribute("info", "添加成功");
 * } return "aa"; } }
 */